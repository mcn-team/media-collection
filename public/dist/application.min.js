"use strict";var ApplicationConfiguration=function(){var applicationModuleName="mediacollection",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("allocine-api"),ApplicationConfiguration.registerModule("books"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("light-rss-feed"),ApplicationConfiguration.registerModule("movies"),ApplicationConfiguration.registerModule("my-api-film"),String.prototype.TruncIsh=String.prototype.TruncIsh||function(limit){return this.length<limit?this:this.substring(0,this.indexOf(" ",limit))+"..."},String.prototype.TruncWord=String.prototype.TruncWord||function(limit){return this.split(" ").length<limit?this:this.substring(0,this.split(" ",limit).join(" ").length)+" ..."},String.prototype.ContainsLower=String.prototype.ContainsLower||function(substr){return-1!==angular.lowercase(this).indexOf(angular.lowercase(substr))},Array.prototype.IsEmptyOrUndefined=Array.prototype.IsEmptyOrUndefined||function(){var isEmpty=!0;return angular.forEach(this,function(current){current&&void 0!==current&&(isEmpty=!1)}),isEmpty},Array.prototype.ContainsLower=Array.prototype.ContainsLower||function(str){var found=!1;return angular.forEach(this,function(current){angular.lowercase(current).ContainsLower(str)&&(found=!0)}),found},Array.prototype.PushUnique=Array.prototype.PushUnique||function(newItem){var found=!1;angular.forEach(this,function(current){current===newItem&&(found=!0)}),found||this.push(newItem)},Array.prototype.Contains=Array.prototype.Contains||function(str){var found=!1;return angular.forEach(this,function(current){current===str&&(found=!0)}),found},ApplicationConfiguration.registerModule("tv-shows"),ApplicationConfiguration.registerModule("users"),angular.module("allocine-api").factory("AlloCineAPIExposed",["$resource",function($resource){return{search:function(toSearch,count,filter){return $resource("api/allocine/:apiAction",{},{search:{method:"GET",params:{apiAction:"search",toSearch:toSearch,count:count,filter:filter},isArray:!0}}).search()},getMediaInfo:function(code,mediaType){return $resource("api/allocine/:apiAction",{},{getMediaInfo:{method:"GET",params:{apiAction:"getMediaInfo",code:code,mediaType:mediaType}}}).getMediaInfo()}}}]),angular.module("books").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Livres","books","dropdown","/books(/create)?"),Menus.addSubMenuItem("topbar","books","Liste des Livres","books"),Menus.addSubMenuItem("topbar","books","List Collections de Livre","books/collections"),Menus.addSubMenuItem("topbar","books","Nouveau Livre","books/create")}]),angular.module("books").config(["$stateProvider",function($stateProvider){$stateProvider.state("listBookCollections",{url:"/books/collections",templateUrl:"modules/books/views/list-collection.client.view.html"}).state("listBooks",{url:"/books",templateUrl:"modules/books/views/list-books.client.view.html"}).state("createBook",{url:"/books/create",templateUrl:"modules/books/views/create-book.client.view.html"}).state("viewBook",{url:"/books/:bookId",templateUrl:"modules/books/views/view-book.client.view.html"}).state("editBook",{url:"/books/:bookId/edit",templateUrl:"modules/books/views/edit-book.client.view.html"})}]),angular.module("books").controller("CreateBookController",["$scope","Authentication","$location","Books","BooksDataService","BooksExposed",function($scope,Authentication,$location,Books,BookServices,BooksExposed){$scope.authentication=Authentication,$scope.isLoaded=!0,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.isDuplicate=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.initCreate=function(){function cloneCallback(result){$scope.bookModel=BookServices.fillBookModel(result),$scope.isLoaded=!0}$scope.listExisting=BooksExposed.getCollectionNames(),$scope.bookModel={},$scope.bookModel.bookRate=7,$scope.bookModel.searchIsbn=null,$location.search()&&$location.search().param&&($scope.isDuplicate=!0,$scope.isLoaded=!1,Books.get({bookId:$location.search().param}).$promise.then(function(result){cloneCallback(result)})),$scope.checkIsbn=function(){return!$scope.bookModel.searchIsbn||10!==$scope.bookModel.searchIsbn.length&&13!==$scope.bookModel.searchIsbn.length},$scope.searchByIsbn=function(){BooksExposed.getBookByISBN({isbn:$scope.bookModel.searchIsbn}).$promise.then(function(result){$scope.bookModel.isbn=$scope.bookModel.searchIsbn,$scope.bookModel=BookServices.fillBookModel(result)})},$scope.bookModel.authorsList||($scope.bookModel.authorsList=[]),$scope.deleteAuthorField=function(index){$scope.bookModel.authorsList.splice(index,1)},$scope.updateAuthorField=function(idx,newStr){$scope.bookModel.authorsList[idx]=newStr},$scope.checkAddAuthor=function(){return!$scope.bookModel.author},$scope.addAuthorField=function(){for(var i=0;i<$scope.bookModel.authorsList.length;i++)if($scope.bookModel.authorsList[i]===$scope.author)return void($scope.bookModel.author="");$scope.bookModel.authorsList.push($scope.bookModel.author),$scope.bookModel.author=""},$scope.bookModel.type="book",$scope.checkAddVolume=function(){return!$scope.bookModel.collectionName||""===$scope.bookModel.collectionName}},$scope.create=function(){var book=BookServices.createBookFromBookModel($scope.bookModel);book.$save(function(response){$location.path("books/"+response._id),$scope.bookModel={}},function(errorResponse){$scope.error=errorResponse.data.message,$scope.bookModel.authorsList.pop()})},$scope.cancelAddDupBook=function(){var tmpUrl=$location.url().split("=")[1];tmpUrl?(delete $location.$$search.param,$location.url("/books/"+tmpUrl)):$location.url("/books")}}]),angular.module("books").controller("EditBookController",["$scope","$stateParams","$location","Authentication","Books","BooksDataService",function($scope,$stateParams,$location,Authentication,Books,BooksDataService){$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.update=function(){var book=BooksDataService.createBookFromBookModel($scope.bookModel);book._id=$scope.bookModel._id,book.$update(function(){$location.path("books/"+book._id),$scope.bookModel={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){function getOneCallback(){$scope.addAuthorField=function(){for(var i=0;i<$scope.bookModel.authorsList.length;i++)if($scope.bookModel.authorsList[i]===$scope.bookModel.author)return void($scope.bookModel.author="");$scope.bookModel.authorsList.push($scope.bookModel.author),$scope.bookModel.author=""},$scope.deleteAuthorField=function(index){$scope.bookModel.authorsList.splice(index,1)},$scope.updateAuthorField=function(idx,newStr){$scope.bookModel.authorsList[idx]=newStr},$scope.checkUpdateVolume=function(){return!$scope.bookModel.collectionName||""===$scope.bookModel.collectionName}}Books.get({bookId:$stateParams.bookId}).$promise.then(function(result){$scope.bookModel=BooksDataService.fillBookModel(result),$scope.bookModel._id=result._id,getOneCallback()})},$scope.cancelEditBook=function(){$location.path("/books/"+$stateParams.bookId)}}]),angular.module("books").controller("ListBooksController",["$scope","$location","Authentication","Books","$anchorScroll","BooksExposed","StatsBookService","BooksDataService",function($scope,$location,Authentication,Books,$anchorScroll,BooksExposed,StatisticsService,BooksDataService){$scope.authentication=Authentication,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.find=function(){$scope.multiSearchOn=!1,Books.query().$promise.then(function(result){$scope.books=result,$scope.isLoaded=!0,$scope.$watch("filteredBooks",function(){$scope.stats=StatisticsService.calculate($scope.filteredBooks)},!0)}),$scope.formatAuthors=function(authors){return BooksDataService.getDisplayAuthorsList(authors)},$scope.restoreList=function(){$scope.multiSearch=void 0}}}]),angular.module("books").controller("ListCollectionController",["$scope","$location","Authentication","$anchorScroll","StatsBookService","BooksExposed",function($scope,$location,Authentication,$anchorScroll,StatisticsService,BooksExposed){$scope.authentication=Authentication,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.findCollection=function(){function getCollectionCallback(){$scope.collectionTab.sort(function(a,b){return a.name>b.name?1:-1}),$scope.stats=StatisticsService.calculate($scope.collectionTab),$scope.isLoaded=!0}$scope.oneAtTime=!0,$scope.goTo=function(path){path&&void 0!==path&&$location.path("/books/"+path)},$scope.books=[],BooksExposed.getCollections().$promise.then(function(result){$scope.collectionTab=result,getCollectionCallback()})}}]),angular.module("books").controller("ViewBookController",["$scope","$location","$stateParams","Books","Authentication","BooksDataService",function($scope,$location,$stateParams,Books,Authentication,BookServices){$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!0,$scope.showPercent=!1,$scope.hoveringOver=function(){$scope.percent=100*($scope.bookModel.bookRate/$scope.ratingMax),$scope.showPercent=!0},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.findOneView=function(){function findBookCallback(){$scope.bookModel=BookServices.fillBookModel($scope.book)}$scope.duplicateItem=function(){$location.path("/books/create").search({param:$scope.book._id})},Books.get({bookId:$stateParams.bookId}).$promise.then(function(result){$scope.book=result,findBookCallback()})},$scope.remove=function(book){if(book){book.$remove();for(var i in $scope.books)$scope.books[i]===book&&$scope.books.splice(i,1)}else $scope.book.$remove(function(){$location.path("books")})}}]),angular.module("books").filter("listBookFilter",[function(){return function(ngRepeatItems,searchText){function chkSearchTextInAuthors(authors,search){for(var i=0;i<authors.length;i++)if(authors[i]&&angular.lowercase(authors[i]).indexOf(angular.lowercase(search))>=0)return!0;return!1}function checkInfosItem(item,search){return item&&angular.lowercase(item).indexOf(angular.lowercase(search))>=0}var newBookList=[];return angular.forEach(ngRepeatItems,function(item){(checkInfosItem(item.title,searchText)||checkInfosItem(item.collectionName,searchText)||checkInfosItem(item.publisher,searchText)||chkSearchTextInAuthors(item.authors,searchText))&&newBookList.push(item)}),!searchText&&newBookList.length<=0&&(newBookList=ngRepeatItems),newBookList}}]),angular.module("books").filter("MultiSearchFilter",["MultiSearchValidatorService",function(ValidatorService){return function(ngRepeatArray,data){var newBookList=[],filters=ValidatorService.getFields(data),validators=ValidatorService.getValidators();return angular.forEach(ngRepeatArray,function(current){var isChecked=!0;angular.forEach(validators,function(item,idx){item.checker(filters[idx],current[item.key])||(isChecked=!1)}),isChecked&&newBookList.PushUnique(current)}),filters.IsEmptyOrUndefined()&&newBookList.length<=0&&(newBookList=ngRepeatArray),newBookList}}]),angular.module("books").factory("BooksDataService",["Books",function(Books){var bookServices={};return bookServices.getLimitedAuthorsList=function(array){var limitedAuthorsList=[];return angular.forEach(array,function(current,idx){idx<array.length-1&&limitedAuthorsList.push(current.trim())}),limitedAuthorsList},bookServices.getDisplayAuthorsList=function(array){if(!array||0===array.length)return"";var displayAuthors="";return angular.forEach(array,function(item){""!==displayAuthors&&item&&(displayAuthors+=", "),displayAuthors+=item}),displayAuthors},bookServices.fillBookModel=function(book){return{type:book.type?book.type:"book",title:book.title,collectionName:book.collectionName?book.collectionName:void 0,volumeId:parseInt(book.volume)?parseInt(book.volume):void 0,displayAuthors:bookServices.getDisplayAuthorsList(book.authors),authorsList:bookServices.getLimitedAuthorsList(book.authors),author:book.author,publishingDate:book.publishingDate.split("T")[0],isbn:book.isbn,publisher:book.publisher,pageCount:parseInt(book.pageCount),price:parseFloat(book.price),read:book.read,bought:book.bought,cover:book.cover,bookRate:book.bookRate,summary:book.summary}},bookServices.createBookFromBookModel=function(model){var authorsTab=[];return angular.forEach(model.authorsList,function(current){authorsTab.push(current)}),model.author&&authorsTab.push(model.author),model.collectionName&&""!==model.collectionName||(model.volumeId="-"),new Books({type:model.type,title:model.title,collectionName:model.collectionName,volume:model.volumeId,authors:authorsTab,publishingDate:model.publishingDate,publisher:model.publisher,price:model.price,isbn:model.isbn,read:model.read,bought:model.bought,pageCount:model.pageCount,cover:model.cover,bookRate:model.bookRate,summary:model.summary})},bookServices}]),angular.module("books").factory("BooksExposed",["$resource",function($resource){var exposedApi={};return exposedApi.lastOne={method:"GET",params:{apiAction:"latest"}},exposedApi.getCollections={method:"GET",isArray:!0,params:{apiAction:"collections"}},exposedApi.getCollectionNames={method:"GET",isArray:!0,params:{apiAction:"names"}},exposedApi.getBookByISBN={method:"GET",params:{apiAction:"isbn",isbn:"@isbn"}},$resource("api/books/:apiAction",{isbn:"@isbn"},exposedApi)}]),angular.module("books").factory("Books",["$resource",function($resource){return $resource("books/:bookId",{bookId:"@_id"},{update:{method:"PUT"}})}]),angular.module("books").factory("MultiSearchValidatorService",[function(){var validatorService={};return validatorService.getFields=function(multiSearch){return[multiSearch.collectionSearch,multiSearch.authorSearch?multiSearch.authorSearch.split(" "):multiSearch.authorSearch,multiSearch.volumeSearch,multiSearch.titleSearch,multiSearch.publisherSearch,multiSearch.dates,multiSearch.boughtSearch,multiSearch.readSearch,multiSearch.pagesSearch,multiSearch.prices]},validatorService.getValidators=function(){var fieldContains=function(search,key){return search?key.ContainsLower(search):!search},arrayContains=function(search,key){if(!search)return!search;var found=!0;return angular.forEach(search,function(current){key.ContainsLower(current)||(found=!1)}),found},fieldIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:key===search},numericIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:parseInt(key)===parseInt(search)},numericCheck=function(search,key){return search&&search.start&&("between"!==search.type||search.start&&search.end&&!(search.start>search.end))?"exact"===search.type?search.start===parseInt(key):"more"===search.type?search.start<=parseInt(key):"less"===search.type?search.start>=parseInt(key):search.start<=parseInt(key)&&search.end>=parseInt(key):!0},datesCheck=function(search,key){return search&&search.start&&("between"!==search.type||search.start&&search.end)?"exact"===search.type?new Date(search.start).getTime()===new Date(key).getTime():"since"===search.type?new Date(search.start).getTime()<=new Date(key).getTime():"before"===search.type?new Date(search.start).getTime()>=new Date(key).getTime():new Date(search.start).getTime()<=new Date(key).getTime()&&new Date(search.end).getTime()>=new Date(key).getTime():!0};return[{checker:fieldContains,key:"collectionName"},{checker:arrayContains,key:"authors"},{checker:numericIsEquals,key:"volume"},{checker:fieldContains,key:"title"},{checker:fieldContains,key:"publisher"},{checker:datesCheck,key:"publishingDate"},{checker:fieldIsEquals,key:"bought"},{checker:fieldIsEquals,key:"read"},{checker:numericCheck,key:"pageCount"},{checker:numericCheck,key:"price"}]},validatorService}]),angular.module("books").factory("StatsBookService",[function(){var statService={},statistics={},initStatistics=function(){statistics={collections:{field:"Nombre de collection",value:0},books:{field:"Nombre de livres",value:0},booksValue:{field:"Valeur totale",value:0},missingValue:{field:"Valeur non renseignées",value:0},read:{field:"Livres terminés",value:0},onGoing:{field:"Lecture en cours",value:0},notRead:{field:"Livres non lu",value:0},bought:{field:"Livres achetés",value:0},toBought:{field:"Livres à acheter",value:0},bookMissing:{field:"Livres manquant",value:0}}},collectionsRef=[],bookStatistics=function(book){book.collectionName&&!collectionsRef.Contains(book.collectionName)&&collectionsRef.push(book.collectionName),book.title&&(statistics.books.value+=1),book.bought&&book.title?(book.price?statistics.booksValue.value+=parseFloat(book.price):statistics.missingValue.value+=1,"READ"===book.read?statistics.read.value+=1:"ONGOING"===book.read?statistics.onGoing.value+=1:statistics.notRead.value+=1,statistics.bought.value+=1):book.bought===!1&&book.title&&(statistics.toBought.value+=1)},collectionsStatistics=function(collection){statistics.bookMissing.value+=collection.missing,angular.forEach(collection.books,function(current){bookStatistics(current)})};return statService.calculate=function(array){function checkStatsCategoryPercents(firstKey,secondKey,thirdKey){var total=statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0);100>total&&(statistics[firstKey].percent>0?statistics[firstKey].percent+=1:statistics[secondKey].percent>0?statistics[secondKey].percent+=1:thirdKey&&statistics[thirdKey]&&statistics[thirdKey].percent&&statistics[thirdKey].percent>0&&(statistics[thirdKey].percent+=1),statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0)<100&&checkStatsCategoryPercents(secondKey,thirdKey,firstKey))}function checkPercents(){checkStatsCategoryPercents("read","onGoing","notRead"),checkStatsCategoryPercents("bought","toBought","bookMissing")}return initStatistics(),collectionsRef=[],angular.forEach(array,function(current){current.title?bookStatistics(current):collectionsStatistics(current)}),statistics.collections.value=collectionsRef.length,statistics.booksValue.value=statistics.booksValue.value.toFixed(2),statistics.read.percent=Math.floor(100*statistics.read.value/statistics.bought.value),statistics.onGoing.percent=Math.floor(100*statistics.onGoing.value/statistics.bought.value),statistics.notRead.percent=Math.floor(100*statistics.notRead.value/statistics.bought.value),array&&array[0]&&array[0].title?(statistics.bought.percent=Math.floor(100*statistics.bought.value/statistics.books.value),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/statistics.books.value)):(statistics.bookMissing.value-=statistics.toBought.value,statistics.bought.percent=Math.floor(100*statistics.bought.value/(statistics.bought.value+statistics.bookMissing.value+statistics.toBought.value)),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/(statistics.bought.value+statistics.bookMissing.value+statistics.toBought.value)),statistics.bookMissing.percent=Math.floor(100*statistics.bookMissing.value/(statistics.bought.value+statistics.bookMissing.value+statistics.toBought.value))),checkPercents(),statistics},statService}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","BooksExposed","MoviesExposed","TvShowsExposed",function($scope,Authentication,BooksExposed,MoviesExposed,TvShowsExposed){function getDisplayList(list){for(var formatted="",i=0;i<list.length;i++){if(i>1){formatted+=", ...";break}""!==formatted&&list[i]&&(formatted+=", "),formatted+=list[i]}return formatted}function latestCallback(result,key,type,limit){return result[key]=getDisplayList(result[key]),result.summary=result.summary?result.summary.TruncIsh(limit):null,$scope.fadeInClass[type]="fade-in",result}$scope.authentication=Authentication,$scope.isLoaded=!0,$scope.fadeInClass={book:"hidden-op",movie:"hidden-op",show:"hidden-op"},$scope.authentication.user?(TvShowsExposed.getLatest().$promise.then(function(result){$scope.lastTvShow=latestCallback(result,"producers","show",750)}),BooksExposed.lastOne().$promise.then(function(result){$scope.lastBookResult=latestCallback(result,"authors","book",240)}),MoviesExposed.lastOne().$promise.then(function(result){$scope.lastMovieResult=latestCallback(result,"actors","movie",240)})):$scope.isLoaded=!0}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("light-rss-feed").config(["$stateProvider","$urlRouterProvider",function(){}]),angular.module("light-rss-feed").controller("rssFeedController",["$scope","Authentication","$interval","$timeout","FeedList","planeteBDFeedService","fnacFeedService",function($scope,Authentication,$interval,$timeout,FeedList,planeteBDService,fnacFeedService){function changeFeedCallback(feedProperties,isReversed){feedProperties.ngClass="feed-fade-out",$timeout(function(){isReversed?feedProperties.idx>0?feedProperties.idx-=1:feedProperties.idx=idxFeed:feedProperties.idx<idxFeed?feedProperties.idx+=1:feedProperties.idx=0,feedProperties.ngClass="feed-fade-in"},1e3)}function pauseResumeFeed(feedProperties){feedProperties.isPaused?feedProperties.handler=$interval(function(){changeFeedCallback(feedProperties)},12e3):$interval.cancel(feedProperties.handler),feedProperties.isPaused=!feedProperties.isPaused}$scope.authentication=Authentication,$scope.feeds={},$scope.feedsProperties={},$scope.pauseFeed=function(idx){pauseResumeFeed($scope.feedsProperties[idx])},$scope.previousFeed=function(idx){changeFeedCallback($scope.feedsProperties[idx],!0)},$scope.nextFeed=function(idx){changeFeedCallback($scope.feedsProperties[idx])};var feeds=FeedList.get(),idxFeed=feeds.length-1;feeds.forEach(function(elem){$scope.feedsProperties[elem.title]={ngClass:"",handler:null,idx:0,isPaused:!1},elem.feed.$promise.then(function(result){$scope.feedsProperties[elem.title].handler=$interval(function(){changeFeedCallback($scope.feedsProperties[elem.title])},12e3),$scope.feeds[elem.title]=result.responseData})}),$scope.parseFnacFeedContent=fnacFeedService.parseFnacFeedContent,$scope.formatFeedTitle=planeteBDService.formatFeedTitle,$scope.parseRssFeedContent=planeteBDService.parseRssFeedContent}]),angular.module("light-rss-feed").factory("fnacFeedService",[function(){var fnacFeedService={};return fnacFeedService.parseFnacFeedContent=function(htmlContent){function regexExtract(str,delimiter){var regX=new RegExp(delimiter+"(.*?)"+delimiter);return str.match(regX)[1]}function fillFeedObjectFields(){var item={};return fragment.forEach(function(elem){-1!==elem.indexOf("><img")?(item.img=regexExtract(elem.split(">")[1],'"'),item.link=regexExtract(elem,'"')):-1!==elem.indexOf("text-align:justify")?item.description=elem.replace(/<[^>]*>/g,""):-1!==elem.indexOf("p><br")?item.title=elem.replace(/<[^>]*>/g,""):-1!==elem.indexOf("span><br")&&(item.price=elem.replace(/<[^>]*>/g,""))}),item}var fragment=[];if(htmlContent){htmlContent=htmlContent.trim(),htmlContent=htmlContent.replace(/\t/g,""),fragment=htmlContent.split("\n");for(var i=0;i<fragment.length;i++)fragment[i]=fragment[i].trim();fragment=fragment.filter(Boolean)}return fillFeedObjectFields()},fnacFeedService}]),angular.module("light-rss-feed").factory("FeedLoader",["$resource",function($resource){return $resource("http://ajax.googleapis.com/ajax/services/feed/load",{},{fetch:{method:"JSONP",params:{v:"1.0",callback:"JSON_CALLBACK"}}})}]).service("FeedList",["$rootScope","FeedLoader",function($rootScope,FeedLoader){function pushFeedData(data){var feed=data.responseData.feed;FeedListService.feeds.push(feed)}var FeedListService={feeds:[]};return FeedListService.get=function(){FeedListService.feeds=[];var feedSources=[{title:"sortie_bd",url:"http://feeds.feedburner.com/PlaneteBdLight-ChroniquesFranco-belges"},{title:"sortie_manga",url:"http://feeds.feedburner.com/PlaneteBdLight-ChroniquesMangas"},{title:"sortie_film",url:"http://www4.fnac.com/Rss/Rss.aspx?NID=2074821"},{title:"sortie_series",url:"http://www4.fnac.com/Rss/Rss.aspx?NID=1476377"}];if(0===FeedListService.feeds.length){for(var allFeeds=[],i=0;i<feedSources.length;i++)allFeeds.push({title:feedSources[i].title,feed:FeedLoader.fetch({q:feedSources[i].url,num:10},{},pushFeedData)});return allFeeds}},FeedListService}]),angular.module("light-rss-feed").factory("planeteBDFeedService",[function(){var planeteBDFeedService={};return planeteBDFeedService.authorField="",planeteBDFeedService.parseRssFeedContent=function(htmlContent){function regexExtract(str,delimiter){var regX=new RegExp(delimiter+"(.*?)"+delimiter);return str.match(regX)[1]}function fillFeedObjectFields(){var item={};return fragment.forEach(function(elem){-1!==elem.indexOf("Auteurs")?item.author=elem:-1!==elem.indexOf('<img src="http')?item.img=regexExtract(elem,'"'):!/\//.test(elem)&&elem.length>50&&(item.summary=elem)}),item}var tmp="",fragment=[];if(htmlContent){htmlContent=htmlContent.replace(/(<i>|<\/i>)/g,""),htmlContent=htmlContent.replace(/(\. \.)/g,".");for(var i=0;i<htmlContent.length;i++)"<"===htmlContent[i]?(""!==tmp&&(fragment.push(tmp),tmp=""),tmp=""):">"===htmlContent[i]&&(tmp+=htmlContent[i],fragment.push(tmp),tmp=""),">"!==htmlContent[i]&&(tmp+=htmlContent[i])}return fillFeedObjectFields()},planeteBDFeedService.formatFeedTitle=function(rssTitle){var tmp=[];return rssTitle&&(tmp=rssTitle.split(" - ")),2===tmp.length&&(rssTitle=tmp[1].length<=2?tmp[0]+" - "+tmp[1].toUpperCase():tmp[0]+" - "+tmp[1].charAt(0).toUpperCase()+tmp[1].substring(1)),rssTitle},planeteBDFeedService}]),angular.module("movies").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Films","movies","dropdown","/movies(/create)?"),Menus.addSubMenuItem("topbar","movies","Liste des Films","movies"),Menus.addSubMenuItem("topbar","movies","Liste Collections de Film","movies/collections"),Menus.addSubMenuItem("topbar","movies","Nouveau Film","movies/create")}]),angular.module("movies").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMovieCollections",{url:"/movies/collections",templateUrl:"modules/movies/views/list-movie-collection.client.view.html"}).state("listMovies",{url:"/movies",templateUrl:"modules/movies/views/list-movies.client.view.html"}).state("createMovie",{url:"/movies/create",templateUrl:"modules/movies/views/create-movie.client.view.html"}).state("viewMovie",{url:"/movies/:movieId",templateUrl:"modules/movies/views/view-movie.client.view.html"}).state("editMovie",{url:"/movies/:movieId/edit",templateUrl:"modules/movies/views/edit-movie.client.view.html"})}]),angular.module("movies").controller("CreateMoviesController",["$scope","$stateParams","$location","$modal","$log","Authentication","Movies","AlloCineAPIExposed","TypesMovieService","MovieDataService",function($scope,$stateParams,$location,$modal,$log,Authentication,Movies,AlloCineExposed,TypesMovieService,MovieDataService){function fillMovieField(item){$scope.movieModel.title=item.title||item.originalTitle,$scope.movieModel.summary=item.summary,$scope.movieModel.duration=item.duration,$scope.movieModel.releasedDate=item.releaseDate,$scope.movieModel.cover=item.coverHref,$scope.movieModel.actorsList=item.actors,$scope.movieModel.directorsList=item.directors,$scope.movieModel.producersList=item.producers,$scope.movieModel.scenaristsList=item.scenarists,$scope.movieModel.searchMovie=""
}$scope.authentication=Authentication,$scope.isLoaded=!0,$scope.isDuplicate=!1,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.initCreate=function(){function cloneCallback(result){$scope.movieModel=MovieDataService.fillMovieModel(result),$scope.isLoaded=!0,$scope.isDuplicate=!0}$scope.movieModel={},$scope.movieModel.movieRate=7,$location.search()&&$location.search().param&&($scope.isLoaded=!1,Movies.get({movieId:$location.search().param}).$promise.then(function(result){cloneCallback(result)})),$scope.movieModel.bought=!0,$scope.movieModel.seen=!1,$scope.movieModel=MovieDataService.initMovieModelLists($scope.movieModel,"actorsList"),$scope.movieModel=MovieDataService.initMovieModelLists($scope.movieModel,"producersList"),$scope.movieModel=MovieDataService.initMovieModelLists($scope.movieModel,"directorsList"),$scope.movieModel=MovieDataService.initMovieModelLists($scope.movieModel,"scenaristsList"),$scope.movieModel.typeList||($scope.movieModel.typeList=TypesMovieService.getTypes(),$scope.movieModel.selectedType=$scope.movieModel.typeList[0]),$scope.updateField=function(idx,newStr,itemList){$scope.movieModel[itemList][idx]=newStr},$scope.deleteField=function(index,itemList){$scope.movieModel[itemList].splice(index,1)},$scope.checkAdd=function(type){return!$scope.movieModel[type]},$scope.addField=function(itemList,item){for(var i=0;i<$scope.movieModel[itemList].length;i++)if($scope.movieModel[itemList][i]===$scope[item])return void($scope.movieModel[item]="");$scope.movieModel[itemList].push($scope.movieModel[item]),$scope.movieModel[item]=""},$scope.checkAddEpisode=function(){return!$scope.movieModel.collectionName||""===$scope.movieModel.collectionName}},$scope.create=function(){var movie=MovieDataService.createMovieFromMovieModel($scope.movieModel);movie.$save(function(response){$location.path("/movies/"+response._id),$scope.movieModel={}},function(errorResponse){$scope.error=errorResponse.data.message,$scope.movieModel.actorsList.pop(),$scope.movieModel.producersList.pop(),$scope.movieModel.directorsList.pop(),$scope.movieModel.scenaristsList.pop()})},$scope.cancelAddDupMovie=function(){var tmpUrl=$location.url().split("=")[1];tmpUrl?(delete $location.$$search.param,$location.url("/movies/"+tmpUrl)):$location.url("/movies")},$scope.searchFilmByTitle=function(){function searchCallback(result){$scope.movieList=result,$scope.open()}AlloCineExposed.search($scope.movieModel.searchMovie,20,"movie").$promise.then(function(result){searchCallback(result)})},$scope.open=function(size){var modalInstance=$modal.open({templateUrl:"searchMovieModalContent.html",controller:"searchMovieModalController",size:size,resolve:{movieList:function(){return $scope.movieList}}});modalInstance.result.then(function(selectedItem){fillMovieField(selectedItem)},function(){$log.info("Modal dismissed at: "+new Date),$scope.movieModel.searchMovie=""})}}]),angular.module("movies").controller("EditMoviesController",["$scope","$stateParams","$location","Authentication","MovieDataService","Movies",function($scope,$stateParams,$location,Authentication,MovieDataService,Movies){$scope.authentication=Authentication,$scope.isLoaded=!1,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.update=function(){var movie=MovieDataService.createMovieFromMovieModel($scope.movieModel);movie._id=$scope.movieModel._id,movie.$update(function(){$location.path("movies/"+movie._id),$scope.movieModel={}},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){function getOneCallback(){$scope.updateField=function(idx,newStr,itemList){$scope.movieModel[itemList][idx]=newStr},$scope.deleteField=function(index,itemList){$scope.movieModel[itemList].splice(index,1)},$scope.checkAdd=function(type){return!$scope.movieModel[type]},$scope.addField=function(itemList,item){for(var i=0;i<$scope.movieModel[itemList].length;i++)if($scope.movieModel[itemList][i]===$scope[item])return void($scope.movieModel[item]="");$scope.movieModel[itemList].push($scope.movieModel[item]),$scope.movieModel[item]=""},$scope.isLoaded=!0}Movies.get({movieId:$stateParams.movieId}).$promise.then(function(result){$scope.movieModel=MovieDataService.fillMovieModel(result),$scope.movieModel._id=result._id,getOneCallback()})},$scope.cancelEditMovie=function(){$location.path("/movies/"+$stateParams.movieId)}}]),angular.module("movies").controller("ListMovieCollectionController",["$scope","$location","Authentication","$anchorScroll","StatsMovieService","MoviesExposed",function($scope,$location,Authentication,$anchorScroll,StatsMovieService,MoviesExposed){$scope.authentication=Authentication,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.findCollection=function(){function getCollectionCallback(){$scope.collectionTab.sort(function(a,b){return a.name>b.name?1:-1}),$scope.stats=StatsMovieService.calculate($scope.collectionTab),$scope.isLoaded=!0}$scope.oneAtTime=!0,$scope.goTo=function(path){path&&void 0!==path&&$location.path("/movies/"+path)},$scope.movies=[],MoviesExposed.getCollections().$promise.then(function(result){$scope.collectionTab=result,getCollectionCallback()})}}]),angular.module("movies").controller("ListMoviesController",["$scope","$location","$anchorScroll","Authentication","StatsMovieService","MovieDataService","Movies",function($scope,$location,$anchorScroll,Authentication,StatsMovieService,MovieDataService,Movies){$scope.authentication=Authentication,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.find=function(){$scope.multiSearchOn=!1,Movies.query().$promise.then(function(result){$scope.movies=result,$scope.isLoaded=!0,$scope.$watch("filteredMovies",function(){$scope.stats=StatsMovieService.calculate($scope.filteredMovies)},!0)}),$scope.formatPeople=function(people){return MovieDataService.getDisplayList(people)},$scope.restoreList=function(){$scope.multiSearch=void 0}}}]),angular.module("movies").controller("searchMovieModalController",["$scope","$modalInstance","movieList","AlloCineAPIExposed",function($scope,$modalInstance,movieList,AlloCineExposed){$scope.isCollapsed=!0,$scope.nothingFound=!1,movieList[0].error?($scope.nothingFound=!0,$scope.stringSearched=movieList[0].searchReq):($scope.movieList=movieList,$scope.selected={movie:$scope.movieList[0]}),$scope.getMovieInfo=function(movie){function movieInfoCallback(result){$scope.selected.movie.scenarists=result.scenarists,$scope.selected.movie.producers=result.producers,$scope.selected.movie.duration=result.duration,$scope.selected.movie.summary=result.summary.replace(/<[^>]*>/g,""),$scope.selected.movie.shortSummary=result.shortSummary.replace(/<[^>]*>/g,""),$scope.isCollapsed=!1}$scope.selected.movie=movie,AlloCineExposed.getMediaInfo(movie.code,"movie").$promise.then(function(result){movieInfoCallback(result)})},$scope.ok=function(){$modalInstance.close($scope.selected.movie)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("movies").controller("ViewMoviesController",["$scope","$stateParams","$location","Authentication","MovieDataService","Movies",function($scope,$stateParams,$location,Authentication,MovieDataService,Movies){$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!0,$scope.showPercent=!1,$scope.hoveringOver=function(){$scope.percent=100*($scope.movieModel.movieRate/$scope.ratingMax),$scope.showPercent=!0},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.findOneView=function(){function findMovieCallback(){$scope.movieModel=MovieDataService.fillMovieModel($scope.movie)}$scope.duplicateItem=function(){$location.path("/movies/create").search({param:$scope.movie._id})},Movies.get({movieId:$stateParams.movieId}).$promise.then(function(result){$scope.movie=result,findMovieCallback()})},$scope.remove=function(movie){if(movie){movie.$remove();for(var i in $scope.movies)$scope.movies[i]===movie&&$scope.movies.splice(i,1)}else $scope.movie.$remove(function(){$location.path("movies")})}}]),angular.module("movies").filter("listMovieFilter",[function(){return function(ngRepeatItems,searchText){function chkSearchText(people,search){for(var i=0;i<people.length;i++)if(people[i]&&angular.lowercase(people[i]).indexOf(angular.lowercase(search))>=0)return!0;return!1}function checkInfosItem(item,search){return item&&angular.lowercase(item).indexOf(angular.lowercase(search))>=0}var newMovieList=[];return angular.forEach(ngRepeatItems,function(item){(checkInfosItem(item.title,searchText)||checkInfosItem(item.collectionName,searchText)||chkSearchText(item.actors,searchText)||chkSearchText(item.producers,searchText)||chkSearchText(item.directors,searchText)||chkSearchText(item.scenarists,searchText))&&newMovieList.push(item)}),!searchText&&newMovieList.length<=0&&(newMovieList=ngRepeatItems),newMovieList}}]),angular.module("movies").filter("MultiSearchMovieFilter",["MultiSearchMovieValidatorService",function(MovieValidatorService){return function(ngRepeatArray,data){var newMovieList=[],filters=MovieValidatorService.getFields(data),validators=MovieValidatorService.getValidators();return angular.forEach(ngRepeatArray,function(current){var isChecked=!0;angular.forEach(validators,function(item,idx){item.checker(filters[idx],current[item.key])||(isChecked=!1)}),isChecked&&newMovieList.PushUnique(current)}),filters.IsEmptyOrUndefined()&&newMovieList.length<=0&&(newMovieList=ngRepeatArray),newMovieList}}]),angular.module("movies").factory("MovieDataService",["TypesMovieService","Movies",function(TypeService,Movies){function pushPeopleToTab(list,item){var itemsTab=[];return angular.forEach(list,function(current){itemsTab.push(current)}),item&&itemsTab.push(item),itemsTab}var movieServices={};return movieServices.initMovieModelLists=function(movieModel,list){return movieModel[list]||(movieModel[list]=[]),movieModel},movieServices.getLimitedList=function(array){var limitedList=[];return angular.forEach(array,function(current,idx){idx<array.length-1&&limitedList.push(current.trim())}),limitedList},movieServices.getDisplayList=function(array){if(!array||0===array.length)return"";var displayList="";return angular.forEach(array,function(item){""!==displayList&&item&&(displayList+=", "),displayList+=item}),displayList},movieServices.fillMovieModel=function(movie){return{typeList:TypeService.getTypes(),seen:movie.seen,selectedType:TypeService.getType(movie.type),title:movie.title,collectionName:movie.collectionName?movie.collectionName:void 0,episode:parseInt(movie.episode)?parseInt(movie.episode):void 0,displayActors:movieServices.getDisplayList(movie.actors),actorsList:movieServices.getLimitedList(movie.actors),actor:movie.actors[movie.actors.length-1],displayProducers:movieServices.getDisplayList(movie.producers),producersList:movieServices.getLimitedList(movie.producers),producer:movie.producers[movie.producers.length-1],displayDirectors:movieServices.getDisplayList(movie.directors),directorsList:movieServices.getLimitedList(movie.directors),director:movie.directors[movie.directors.length-1],displayScenarists:movieServices.getDisplayList(movie.scenarists),scenaristsList:movieServices.getLimitedList(movie.scenarists),scenarist:movie.scenarists[movie.scenarists.length-1],releasedDate:movie.releasedDate?movie.releasedDate.split("T")[0]:void 0,duration:parseInt(movie.duration),price:parseFloat(movie.price),bought:movie.bought,cover:movie.cover,movieRate:movie.movieRate,summary:movie.summary}},movieServices.createMovieFromMovieModel=function(model){var actorsTab=pushPeopleToTab(model.actorsList,model.actor),producersTab=pushPeopleToTab(model.producersList,model.producer),directorsTab=pushPeopleToTab(model.directorsList,model.director),scenaristsTab=pushPeopleToTab(model.scenaristsList,model.scenarist);return model.collectionName&&""!==model.collectionName||(model.episode=0),new Movies({type:model.selectedType?model.selectedType.value:"",title:model.title,collectionName:model.collectionName,episode:model.episode,actors:actorsTab,producers:producersTab,directors:directorsTab,scenarists:scenaristsTab,releasedDate:model.releasedDate,price:model.price,seen:model.seen,bought:model.bought,duration:model.duration,cover:model.cover,movieRate:model.movieRate,summary:model.summary})},movieServices}]),angular.module("movies").factory("MoviesExposed",["$resource",function($resource){return $resource("api/movies/:apiAction",{},{lastOne:{method:"GET",params:{apiAction:"latest"}},getCollections:{method:"GET",isArray:!0,params:{apiAction:"collections"}},getCollectionNames:{method:"GET",isArray:!0,params:{apiAction:"names"}}})}]),angular.module("movies").factory("Movies",["$resource",function($resource){return $resource("movies/:movieId",{movieId:"@_id"},{update:{method:"PUT"}})}]),angular.module("movies").factory("MultiSearchMovieValidatorService",[function(){var validatorService={};return validatorService.getFields=function(multiSearch){return[multiSearch.collectionSearch,multiSearch.actorSearch?multiSearch.actorSearch.split(" "):multiSearch.actorSearch,multiSearch.producerSearch?multiSearch.producerSearch.split(" "):multiSearch.producerSearch,multiSearch.directorSearch?multiSearch.directorSearch.split(" "):multiSearch.directorSearch,multiSearch.scenaristSearch?multiSearch.scenaristSearch.split(" "):multiSearch.scenaristSearch,multiSearch.episodeSearch,multiSearch.titleSearch,multiSearch.dates,multiSearch.boughtSearch,multiSearch.seenSearch,multiSearch.durationSearch,multiSearch.prices]},validatorService.getValidators=function(){var fieldContains=function(search,key){return search?key.ContainsLower(search):!search},arrayContains=function(search,key){if(!search)return!search;var found=!0;return angular.forEach(search,function(current){key.ContainsLower(current)||(found=!1)}),found},fieldIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:key===search},numericIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:parseInt(key)===parseInt(search)},numericCheck=function(search,key){return search&&search.start&&("between"!==search.type||search.start&&search.end&&!(search.start>search.end))?"exact"===search.type?search.start===parseInt(key):"more"===search.type?search.start<=parseInt(key):"less"===search.type?search.start>=parseInt(key):search.start<=parseInt(key)&&search.end>=parseInt(key):!0},datesCheck=function(search,key){return search&&search.start&&("between"!==search.type||search.start&&search.end)?"exact"===search.type?new Date(search.start).getTime()===new Date(key).getTime():"since"===search.type?new Date(search.start).getTime()<=new Date(key).getTime():"before"===search.type?new Date(search.start).getTime()>=new Date(key).getTime():new Date(search.start).getTime()<=new Date(key).getTime()&&new Date(search.end).getTime()>=new Date(key).getTime():!0};return[{checker:fieldContains,key:"collectionName"},{checker:arrayContains,key:"actors"},{checker:arrayContains,key:"producers"},{checker:arrayContains,key:"directors"},{checker:arrayContains,key:"scenarists"},{checker:numericIsEquals,key:"episode"},{checker:fieldContains,key:"title"},{checker:datesCheck,key:"releasedDate"},{checker:fieldIsEquals,key:"bought"},{checker:fieldIsEquals,key:"seen"},{checker:numericCheck,key:"duration"},{checker:numericCheck,key:"price"}]},validatorService}]),angular.module("movies").factory("StatsMovieService",[function(){var statService={},statistics={},initStatistics=function(){statistics={collections:{field:"Nombre de collection",value:0},movies:{field:"Nombre de Films",value:0},moviesValue:{field:"Valeur totale",value:0},missingValue:{field:"Valeur non renseignées",value:0},seen:{field:"Films terminés",value:0},notSeen:{field:"Films non Vu",value:0},bought:{field:"Films achetés",value:0},toBought:{field:"Films à acheter",value:0},movieMissing:{field:"Films manquant",value:0},totalDuration:{field:"Durée totale",value:0},totalSeenDuration:{field:"Durée totale vu",value:0},toWatchDuration:{field:"Reste à voir",value:0}}},collectionsRef=[],movieStatistics=function(movie){movie.collectionName&&!collectionsRef.Contains(movie.collectionName)&&collectionsRef.push(movie.collectionName),movie.title&&(statistics.movies.value+=1),movie.bought&&movie.title?(movie.price?statistics.moviesValue.value+=parseFloat(movie.price):statistics.missingValue.value+=1,movie.seen?(statistics.seen.value+=1,statistics.totalSeenDuration.value+=movie.duration):(statistics.notSeen.value+=1,statistics.toWatchDuration.value+=movie.duration),movie.duration&&(statistics.totalDuration.value+=movie.duration),statistics.bought.value+=1):movie.bought===!1&&movie.title&&(statistics.toBought.value+=1)},collectionsStatistics=function(collection){statistics.movieMissing.value+=collection.missing,angular.forEach(collection.movies,function(current){movieStatistics(current)})};return statService.calculate=function(array){function checkStatsCategoryPercents(firstKey,secondKey,thirdKey){var total=statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0);100>total&&(statistics[firstKey].percent>0?statistics[firstKey].percent+=1:statistics[secondKey].percent>0?statistics[secondKey].percent+=1:thirdKey&&statistics[thirdKey]&&statistics[thirdKey].percent&&statistics[thirdKey].percent>0&&(statistics[thirdKey].percent+=1),statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0)<100&&checkStatsCategoryPercents(secondKey,thirdKey,firstKey))}function checkPercents(){checkStatsCategoryPercents("seen","notSeen"),checkStatsCategoryPercents("bought","toBought","movieMissing"),checkStatsCategoryPercents("totalSeenDuration","toWatchDuration")}return initStatistics(),collectionsRef=[],angular.forEach(array,function(current){current.title?movieStatistics(current):collectionsStatistics(current)}),statistics.collections.value=collectionsRef.length,statistics.moviesValue.value=statistics.moviesValue.value.toFixed(2),statistics.seen.percent=Math.floor(100*statistics.seen.value/statistics.bought.value),statistics.notSeen.percent=Math.floor(100*statistics.notSeen.value/statistics.bought.value),statistics.totalSeenDuration.percent=Math.floor(100*statistics.totalSeenDuration.value/statistics.totalDuration.value),statistics.toWatchDuration.percent=Math.floor(100*statistics.toWatchDuration.value/statistics.totalDuration.value),array&&array[0]&&array[0].title?(statistics.bought.percent=Math.floor(100*statistics.bought.value/statistics.movies.value),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/statistics.movies.value)):(statistics.movieMissing.value-=statistics.toBought.value,statistics.bought.percent=Math.floor(100*statistics.bought.value/(statistics.bought.value+statistics.movieMissing.value+statistics.toBought.value)),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/(statistics.bought.value+statistics.movieMissing.value+statistics.toBought.value)),statistics.movieMissing.percent=Math.floor(100*statistics.movieMissing.value/(statistics.bought.value+statistics.movieMissing.value+statistics.toBought.value))),checkPercents(),statistics},statService}]),angular.module("movies").factory("TypesMovieService",[function(){var typesService={},typeList=[{displayName:"Action",value:"action"},{displayName:"Thriller",value:"thriller"},{displayName:"Aventures",value:"aventures"},{displayName:"Policier",value:"policier"},{displayName:"Comédie",value:"comedie"},{displayName:"Fantastique",value:"fantastique"},{displayName:"Science Fiction",value:"sf"}];return typesService.getTypes=function(){return typeList},typesService.getType=function(prop){var type=null;return angular.forEach(typeList,function(current){current.value===prop&&(type=current)}),type},typesService}]),angular.module("my-api-film").controller("myApiFilmController",["$scope","$sce","Authentication","myApiFilmExposed","$interval","$timeout",function($scope,$sce,Authentication,ApiFilmExposed,$interval,$timeout){function changeFeedCallback(feedProperties,isReversed){feedProperties.ngClass="feed-fade-out",$timeout(function(){isReversed?feedProperties.idx>0?feedProperties.idx-=1:feedProperties.idx=$scope.trailerNbr:feedProperties.idx<$scope.trailerNbr?feedProperties.idx+=1:feedProperties.idx=0,feedProperties.ngClass="feed-fade-in"},1e3)}function pauseResumeFeed(feedProperties){feedProperties.isPaused?feedProperties.handler=$interval(function(){changeFeedCallback(feedProperties)},12e3):$interval.cancel(feedProperties.handler),feedProperties.isPaused=!feedProperties.isPaused}function lastTrailerCallback(result){$scope.trailers=result.trailer,$scope.selected=result.trailer[0],$scope.ngClass="fade-in",$scope.trailerNbr=result.trailer.length-1}$scope.authentication=Authentication,$scope.ngClass="hidden-op",$scope.myInterval=5e3,$scope.trailers=[],$scope.trailerProp={ngClass:"",idx:0,isPaused:!1},$scope.trailerProp.handler=$interval(function(){changeFeedCallback($scope.trailerProp)},12e3),$scope.pauseFeed=function(){pauseResumeFeed($scope.firstFeed)},$scope.previousFeed=function(){changeFeedCallback($scope.trailerProp,!0)},$scope.nextFeed=function(){changeFeedCallback($scope.trailerProp)},$scope.trustSrc=function(src){return $sce.trustAsResourceUrl(src)},ApiFilmExposed.lastTrailer(4).$promise.then(function(result){lastTrailerCallback(result)})}]),angular.module("my-api-film").factory("myApiFilmExposed",["$resource",function($resource){return{lastTrailer:function(count){return $resource("/api/myApiFilm/:apiAction",{},{getLastTrailer:{method:"GET",params:{apiAction:"latestTrailer",count:count}}}).getLastTrailer()}}}]),angular.module("tv-shows").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Séries TV","tv-shows","dropdown","/tv-shows(/create)?"),Menus.addSubMenuItem("topbar","tv-shows","Liste des Séries Tv","tv-shows"),Menus.addSubMenuItem("topbar","tv-shows","Liste Collections de Série TV","tv-shows/collections"),Menus.addSubMenuItem("topbar","tv-shows","Nouvelle Série Tv","tv-shows/create")}]),angular.module("tv-shows").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTvShowsCollections",{url:"/tv-shows/collections",templateUrl:"modules/tv-shows/views/collections-tv-shows.client.view.html"}).state("listTvShows",{url:"/tv-shows",templateUrl:"modules/tv-shows/views/list-tv-shows.client.view.html"}).state("createTvShow",{url:"/tv-shows/create",templateUrl:"modules/tv-shows/views/create-tv-show.client.view.html"}).state("viewTvShow",{url:"/tv-shows/:tvShowId",templateUrl:"modules/tv-shows/views/view-tv-show.client.view.html"}).state("editTvShow",{url:"/tv-shows/:tvShowId/edit",templateUrl:"modules/tv-shows/views/edit-tv-show.client.view.html"})}]),angular.module("tv-shows").controller("CollectionsTvShowsController",["$scope","$location","$anchorScroll","Authentication","TvShowsExposed","StatsTvShowsService",function($scope,$location,$anchorScroll,Authentication,TvShowsExposed,StatsService){$scope.authentication=Authentication,$scope.oneAtTime=!0,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.goTo=function(path){path&&void 0!==path&&$location.path("/tv-shows/"+path)},TvShowsExposed.getCollections().$promise.then(function(result){$scope.collectionTab=result,$scope.stats=StatsService.calculate(result),$scope.isLoaded=!0})}]),angular.module("tv-shows").controller("CreateTvShowsController",["$scope","$location","$log","Authentication","TvShows","TvShowsExposed","TvShowsDataService","$modal","AlloCineAPIExposed",function($scope,$location,$log,Authentication,TvShows,TvShowsExposed,TvShowService,$modal,AlloCineExposed){function fillTvShowField(item){$scope.tvShowModel.name=item.title||item.originalTitle,$scope.tvShowModel.summary=item.summary,$scope.tvShowModel.duration=item.duration,$scope.tvShowModel.year=item.releaseDate,$scope.tvShowModel.cover=item.coverHref,$scope.tvShowModel.actorsList=item.actors?TvShowService.getLimitedList(item.actors):void 0,$scope.tvShowModel.actor=item.actors?TvShowService.getListLastOne(item.actors):void 0,$scope.tvShowModel.producersList=item.producers?TvShowService.getLimitedList(item.producers):void 0,$scope.tvShowModel.producer=item.producers?TvShowService.getListLastOne(item.producers):void 0,$scope.tvShowModel.creatorsList=item.scenarists?TvShowService.getLimitedList(item.scenarists):void 0,$scope.tvShowModel.creator=item.scenarists?TvShowService.getListLastOne(item.scenarists):void 0,$scope.tvShowModel.searchTvShow=""}$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isDuplicate=!1,$scope.isReadonly=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.episodeHelper="Renseignez le nombre d'épisode du média entré et non le total de la saison <br> (ex: le DVD/coffret ne contient que 10 des 20 épisodes de la saison, mettez 10)",$scope.durationHelper="Renseignez la durée moyenne d'un épisode, et non le total",$scope.isLoaded=!1,$scope.tvShowModel={scenaristsList:[],actorsList:[],directorsList:[],producersList:[],seen:"NOTSEEN",bought:!0},$scope.tvShowModel.tvShowRate=7,$location.search()&&$location.search().param?($scope.mainTitle="Dupliquer une série",TvShows.get({tvShowId:$location.search().param}).$promise.then(function(result){$scope.tvShowModel=TvShowService.fillCreateTvShowModel(result),$scope.isDuplicate=!0,$scope.isLoaded=!0})):($scope.isLoaded=!0,$scope.mainTitle="Nouvelle série"),$scope.existingSeries=TvShowsExposed.getCollectionNames(),$scope.updateField=function(idx,newStr,itemList){$scope.tvShowModel[itemList][idx]=newStr},$scope.deleteField=function(index,itemList){$scope.tvShowModel[itemList].splice(index,1)},$scope.checkAdd=function(type){return!$scope.tvShowModel[type]},$scope.addField=function(itemList,item){for(var i=0;i<$scope.tvShowModel[itemList].length;i++)if($scope.tvShowModel[itemList][i]===$scope[item])return void($scope.tvShowModel[item]="");$scope.tvShowModel[itemList].push($scope.tvShowModel[item]),$scope.tvShowModel[item]=""},$scope.create=function(){var tvShow=TvShowService.createTvShowFromModel($scope.tvShowModel);tvShow.$save(function(response){$location.path("tv-shows/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.cancelAddDupTvShow=function(){var tmpUrl=$location.url().split("=")[1];tmpUrl?(delete $location.$$search.param,$location.url("/tv-shows/"+tmpUrl)):$location.url("/tv-shows")},$scope.searchTVShowsByTitle=function(){function searchCallback(result){$scope.tvShowList=result,$scope.open()}AlloCineExposed.search($scope.tvShowModel.searchTvShow,20,"tvseries").$promise.then(function(result){searchCallback(result)})},$scope.open=function(size){var modalInstance=$modal.open({templateUrl:"searchTvShowModalContent.html",controller:"searchTvShowModalController",size:size,resolve:{tvShowList:function(){return $scope.tvShowList}}});modalInstance.result.then(function(selectedItem){fillTvShowField(selectedItem)},function(){$log.info("Modal dismissed at: "+new Date),$scope.tvShowModel.searchTvShow=""})}}]),angular.module("tv-shows").controller("EditTvShowsController",["$scope","$stateParams","$location","Authentication","TvShows","TvShowsDataService","TvShowsExposed",function($scope,$stateParams,$location,Authentication,TvShows,TvShowService,TvShowsExposed){$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.update=function(){var tvShow=TvShowService.createTvShowFromModel($scope.tvShowModel);tvShow._id=$scope.tvShowModel._id,tvShow.$update(function(){$location.path("tv-shows/"+tvShow._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findOne=function(){TvShows.get({tvShowId:$stateParams.tvShowId}).$promise.then(function(result){$scope.tvShowModel=TvShowService.fillCreateTvShowModel(result),$scope.isLoaded=!0,$scope.tvShowModel.lastSeen&&$scope.tvShowModel.lastSeen>=0&&($scope.isLastSeen=!0),$scope.tvShowModel.partial&&$scope.tvShowModel.partial>=0&&($scope.isPartial=!0),$scope.updateField=function(idx,newStr,itemList){$scope.tvShowModel[itemList][idx]=newStr},$scope.deleteField=function(index,itemList){$scope.tvShowModel[itemList].splice(index,1)},$scope.checkAdd=function(type){return!$scope.tvShowModel[type]},$scope.addField=function(itemList,item){for(var i=0;i<$scope.tvShowModel[itemList].length;i++)if($scope.tvShowModel[itemList][i]===$scope[item])return void($scope.tvShowModel[item]="");$scope.tvShowModel[itemList].push($scope.tvShowModel[item]),$scope.tvShowModel[item]=""}}),$scope.existingSeries=TvShowsExposed.getCollectionNames()},$scope.cancelEditTvShow=function(){$location.path("/tv-shows/"+$stateParams.tvShowId)}}]),angular.module("tv-shows").controller("FormTvShowsController",["$scope","$stateParams","$location","$log","Authentication","TvShows","TvShowsExposed","TvShowsDataService","$modal","AlloCineAPIExposed",function($scope,$stateParams,$location,$log,Authentication,TvShows,TvShowsExposed,TvShowService,$modal,AlloCineExposed){$scope.editInit=function(){$scope.update=function(){var tvShow=TvShowService.createTvShowFromModel($scope.tvShowModel);tvShow._id=$scope.tvShowModel._id,tvShow.$update(function(){$location.path("tv-shows/"+tvShow._id)},function(errorResponse){$scope.error=errorResponse.data.message})},TvShows.get({tvShowId:$stateParams.tvShowId}).$promise.then(function(result){$scope.tvShowModel=TvShowService.fillCreateTvShowModel(result),$scope.isLoaded=!0,$scope.tvShowModel.lastSeen&&$scope.tvShowModel.lastSeen>=0&&($scope.isLastSeen=!0)})},$scope.createInit=function(){function fillTvShowField(item){$scope.tvShowModel=TvShowService.fillModelFromModal(item),$scope.tvShowModel.searchTvShow=""}$scope.isDuplicate=!1,$scope.tvShowModel={seen:"NOTSEEN",bought:!0,tvShowRate:7},$location.search()&&$location.search().param?($scope.mainTitle="Dupliquer une série",TvShows.get({tvShowId:$location.search().param}).$promise.then(function(result){$scope.tvShowModel=TvShowService.fillCreateTvShowModel(result),$scope.isDuplicate=!0,$scope.isLoaded=!0})):($scope.isLoaded=!0,$scope.mainTitle="Nouvelle série"),$scope.create=function(){var tvShow=TvShowService.createTvShowFromModel($scope.tvShowModel);tvShow.$save(function(response){$location.path("tv-shows/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.searchTVShowsByTitle=function(){function searchCallback(result){$scope.tvShowList=result,$scope.open()}AlloCineExposed.search($scope.tvShowModel.searchTvShow,20,"tvseries").$promise.then(function(result){searchCallback(result)})},$scope.open=function(size){var modalInstance=$modal.open({templateUrl:"searchTvShowModalContent.html",controller:"searchTvShowModalController",size:size,resolve:{tvShowList:function(){return $scope.tvShowList
}}});modalInstance.result.then(function(selectedItem){fillTvShowField(selectedItem)},function(){$log.info("Modal dismissed at: "+new Date),$scope.tvShowModel.searchTvShow=""})}},$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!1,$scope.tvShowModel={scenaristsList:[],actorsList:[],directorsList:[],producersList:[]},$scope.hoveringOver=function(value){$scope.overStar=value},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.episodeHelper="Renseignez le nombre d'épisode du média entré et non le total de la saison <br> (ex: le DVD/coffret ne contient que 10 des 20 épisodes de la saison, mettez 10)",$scope.durationHelper="Renseignez la durée moyenne d'un épisode, et non le total",$scope.isLoaded=!1,$scope.existingSeries=TvShowsExposed.getCollectionNames(),$scope.cancelPage=function(){var id=$scope.tvShowModel._id?"/"+$scope.tvShowModel._id:"";$location.path("/tv-shows"+id)},$scope.updateField=function(idx,newStr,itemList){$scope.tvShowModel[itemList][idx]=newStr},$scope.deleteField=function(index,itemList){$scope.tvShowModel[itemList].splice(index,1)},$scope.checkAdd=function(type){return!$scope.tvShowModel[type]},$scope.addField=function(itemList,item){for(var i=0;i<$scope.tvShowModel[itemList].length;i++)if($scope.tvShowModel[itemList][i]===$scope[item])return void($scope.tvShowModel[item]="");$scope.tvShowModel[itemList].push($scope.tvShowModel[item]),$scope.tvShowModel[item]=""}}]),angular.module("tv-shows").controller("ListTvShowsController",["$scope","$location","$anchorScroll","Authentication","TvShows","TvShowsDataService","StatsTvShowsService",function($scope,$location,$anchorScroll,Authentication,TvShows,TvShowsService,StatsService){$scope.authentication=Authentication,$scope.goToStats=function(){$location.hash("stats"),$anchorScroll()},$scope.find=function(){TvShows.query().$promise.then(function(result){$scope.tvShows=result,$scope.isLoaded=!0,$scope.$watch("filteredTvShows",function(){$scope.stats=StatsService.calculate($scope.filteredTvShows)},!0)})},$scope.getDisplayList=function(array){return TvShowsService.getDisplayList(array)}}]),angular.module("tv-shows").controller("searchTvShowModalController",["$scope","$modalInstance","tvShowList","AlloCineAPIExposed",function($scope,$modalInstance,tvShowList,AlloCineExposed){$scope.isCollapsed=!0,$scope.nothingFound=!1,tvShowList[0].error?($scope.nothingFound=!0,$scope.stringSearched=tvShowList[0].searchReq):($scope.tvShowList=tvShowList,$scope.selected={tvShow:$scope.tvShowList[0]}),$scope.getTvShowInfo=function(tvShow){function tvShowInfoCallback(result){$scope.selected.tvShow.producers=result.producers,$scope.selected.tvShow.duration=result.duration,$scope.selected.tvShow.summary=result.summary.replace(/<[^>]*>/g,""),$scope.selected.tvShow.shortSummary=result.shortSummary.replace(/<[^>]*>/g,""),$scope.isCollapsed=!1}$scope.selected.tvShow=tvShow,AlloCineExposed.getMediaInfo(tvShow.code,"tvseries").$promise.then(function(result){tvShowInfoCallback(result)})},$scope.ok=function(){$modalInstance.close($scope.selected.tvShow)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("tv-shows").controller("ViewTvShowsController",["$scope","$stateParams","$location","Authentication","TvShows","TvShowsDataService",function($scope,$stateParams,$location,Authentication,TvShows,TvShowsService){$scope.authentication=Authentication,$scope.ratingMax=10,$scope.isReadonly=!0,$scope.showPercent=!1,$scope.hoveringOver=function(){$scope.percent=100*($scope.tvShowModel.tvShowRate/$scope.ratingMax),$scope.showPercent=!0},$scope.ratingStates=[{stateOn:"glyphicon-ok-sign",stateOff:"glyphicon-ok-circle"},{stateOn:"glyphicon-star",stateOff:"glyphicon-star-empty"},{stateOn:"glyphicon-heart",stateOff:"glyphicon-ban-circle"},{stateOn:"glyphicon-heart"},{stateOff:"glyphicon-off"}],$scope.duplicateItem=function(){$location.path("/tv-shows/create").search({param:$scope.tvShowModel._id})},$scope.remove=function(tvShow){if(tvShow){tvShow.$remove();for(var i in $scope.tvShows)$scope.tvShows[i]===tvShow&&$scope.tvShows.splice(i,1)}else $scope.tvShow.$remove(function(){$location.path("tv-shows")})},$scope.findOne=function(){TvShows.get({tvShowId:$stateParams.tvShowId}).$promise.then(function(result){null===result.price&&(result.price=void 0),$scope.tvShow=result,$scope.tvShowModel=TvShowsService.fillViewTvShowModel(result),$scope.isLoaded=!0})}}]),angular.module("tv-shows").filter("listShowsFilter",[function(){return function(ngRepeatItems,searchText){function chkSearchTextInList(list){for(var i=0;i<list.length;i++)if(list[i]&&angular.lowercase(list[i]).indexOf(angular.lowercase(searchText))>=0)return!0;return!1}function checkInfosItem(item){return item&&angular.lowercase(item).indexOf(angular.lowercase(searchText))>=0}var newList=[];return angular.forEach(ngRepeatItems,function(item){(checkInfosItem(item.tvShowName)||chkSearchTextInList(item.producers)||chkSearchTextInList(item.actors))&&newList.push(item)}),!searchText&&newList.length<=0&&(newList=ngRepeatItems),newList}}]),angular.module("tv-shows").filter("MultiSearchTvShowFilter",["MultiSearchTvShowValidatorService",function(ValidatorService){return function(ngRepeatArray,data){var newList=[],filters=ValidatorService.getFields(data),validators=ValidatorService.getValidators();return angular.forEach(ngRepeatArray,function(current){var isChecked=!0;angular.forEach(validators,function(item,idx){item.checker(filters[idx],current[item.key])||(isChecked=!1)}),isChecked&&newList.PushUnique(current)}),filters.IsEmptyOrUndefined()&&newList.length<=0&&(newList=ngRepeatArray),newList}}]),angular.module("movies").factory("MultiSearchTvShowValidatorService",[function(){var validatorService={};return validatorService.getFields=function(multiSearch){return[multiSearch.nameSearch,multiSearch.actorSearch?multiSearch.actorSearch.split(" "):multiSearch.actorSearch,multiSearch.producerSearch?multiSearch.producerSearch.split(" "):multiSearch.producerSearch,multiSearch.scenaristSearch?multiSearch.scenaristSearch.split(" "):multiSearch.scenaristSearch,multiSearch.seasonSearch,multiSearch.channelSearch,multiSearch.yearSearch,multiSearch.boughtSearch,multiSearch.seenSearch,multiSearch.durationSearch,multiSearch.prices]},validatorService.getValidators=function(){var fieldContains=function(search,key){return search?key.ContainsLower(search):!search},arrayContains=function(search,key){if(!search)return!search;var found=!0;return angular.forEach(search,function(current){key.ContainsLower(current)||(found=!1)}),found},fieldIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:key===search},numericIsEquals=function(search,key){return void 0===search||""===search||null===search?!0:parseInt(key)===parseInt(search)},numericCheck=function(search,key){return search&&search.start&&("between"!==search.type||search.start&&search.end&&!(search.start>search.end))?"exact"===search.type?search.start===parseInt(key):"more"===search.type?search.start<=parseInt(key):"less"===search.type?search.start>=parseInt(key):search.start<=parseInt(key)&&search.end>=parseInt(key):!0};return[{checker:fieldContains,key:"tvShowName"},{checker:arrayContains,key:"actors"},{checker:arrayContains,key:"producers"},{checker:arrayContains,key:"creators"},{checker:numericIsEquals,key:"season"},{checker:fieldContains,key:"channel"},{checker:numericIsEquals,key:"year"},{checker:fieldIsEquals,key:"bought"},{checker:fieldIsEquals,key:"seen"},{checker:numericCheck,key:"duration"},{checker:numericCheck,key:"price"}]},validatorService}]),angular.module("tv-shows").factory("StatsTvShowsService",[function(){var statService={},statistics={},initStatistics=function(){statistics={series:{field:"Nombre de série",value:0},media:{field:"Nombre de média",value:0},tvShowsValue:{field:"Valeur totale",value:0},missingValue:{field:"Valeur non renseignées",value:0},seen:{field:"Séries terminés",value:0},onGoing:{field:"Séries en cours",value:0},notSeen:{field:"Séries non vu",value:0},bought:{field:"Séries achetés",value:0},toBought:{field:"Séries à acheter",value:0},mediaMissing:{field:"Séries manquantes",value:0},totalDuration:{field:"Durée totale",value:0},totalSeenDuration:{field:"Durée totale vu",value:0},toWatchDuration:{field:"Reste à voir",value:0}}},collectionsRef=[],tvShowStatistics=function(tvShow){tvShow.tvShowName&&!collectionsRef.Contains(tvShow.tvShowName)&&collectionsRef.push(tvShow.tvShowName),tvShow.tvShowName&&(statistics.media.value+=1),tvShow.bought&&tvShow.tvShowName?(tvShow.price?statistics.tvShowsValue.value+=parseFloat(tvShow.price):statistics.missingValue.value+=1,"SEEN"===tvShow.seen?(statistics.seen.value+=1,statistics.totalSeenDuration.value+=tvShow.duration*tvShow.episodes):"NOTSEEN"===tvShow.seen?(statistics.notSeen.value+=1,statistics.toWatchDuration.value+=tvShow.duration*tvShow.episodes):(statistics.onGoing.value+=1,statistics.totalSeenDuration.value+=tvShow.duration*tvShow.lastSeen,statistics.toWatchDuration.value+=tvShow.duration*(tvShow.episodes-tvShow.lastSeen)),tvShow.duration&&tvShow.episodes&&(statistics.totalDuration.value+=tvShow.duration*tvShow.episodes),statistics.bought.value+=1):tvShow.bought===!1&&tvShow.created&&(statistics.toBought.value+=1)},collectionsStatistics=function(collection){statistics.mediaMissing.value+=collection.missing,angular.forEach(collection.tvShows,function(current){tvShowStatistics(current)})};return statService.calculate=function(array){function checkStatsCategoryPercents(firstKey,secondKey,thirdKey){var total=statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0);100>total&&(statistics[firstKey].percent>0?statistics[firstKey].percent+=1:statistics[secondKey].percent>0?statistics[secondKey].percent+=1:thirdKey&&statistics[thirdKey]&&statistics[thirdKey].percent&&statistics[thirdKey].percent>0&&(statistics[thirdKey].percent+=1),statistics[firstKey].percent+statistics[secondKey].percent+(statistics[thirdKey]&&statistics[thirdKey].percent?statistics[thirdKey].percent:0)<100&&checkStatsCategoryPercents(secondKey,thirdKey,firstKey))}function checkPercents(){checkStatsCategoryPercents("seen","onGoing","notSeen"),checkStatsCategoryPercents("bought","toBought","mediaMissing"),checkStatsCategoryPercents("totalSeenDuration","toWatchDuration")}return initStatistics(),collectionsRef=[],angular.forEach(array,function(current){current.tvShowName?tvShowStatistics(current):collectionsStatistics(current)}),statistics.series.value=collectionsRef.length,statistics.tvShowsValue.value=statistics.tvShowsValue.value.toFixed(2),statistics.seen.percent=Math.floor(100*statistics.seen.value/statistics.bought.value),statistics.onGoing.percent=Math.floor(100*statistics.onGoing.value/statistics.bought.value),statistics.notSeen.percent=Math.floor(100*statistics.notSeen.value/statistics.bought.value),statistics.totalSeenDuration.percent=Math.floor(100*statistics.totalSeenDuration.value/statistics.totalDuration.value),statistics.toWatchDuration.percent=Math.floor(100*statistics.toWatchDuration.value/statistics.totalDuration.value),array&&array[0]&&(array[0].title||array[0].tvShowName)?(statistics.bought.percent=Math.floor(100*statistics.bought.value/statistics.media.value),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/statistics.media.value)):(statistics.mediaMissing.value-=statistics.toBought.value,statistics.bought.percent=Math.floor(100*statistics.bought.value/(statistics.bought.value+statistics.mediaMissing.value+statistics.toBought.value)),statistics.toBought.percent=Math.floor(100*statistics.toBought.value/(statistics.bought.value+statistics.mediaMissing.value+statistics.toBought.value)),statistics.mediaMissing.percent=Math.floor(100*statistics.mediaMissing.value/(statistics.bought.value+statistics.mediaMissing.value+statistics.toBought.value))),checkPercents(),statistics},statService}]),angular.module("tv-shows").factory("TvShowsDataService",["TvShows",function(TvShows){function fillBaseTvShowModel(tvShow){return{_id:tvShow._id,name:tvShow.tvShowName,season:tvShow.season,episodes:tvShow.episodes,partial:tvShow.partial,lastSeen:tvShow.lastSeen,seen:tvShow.seen,bought:tvShow.bought,price:parseFloat(tvShow.price),cover:tvShow.cover,channel:tvShow.channel,duration:tvShow.duration,year:tvShow.year,tvShowRate:tvShow.tvShowRate,summary:tvShow.summary}}var dataService={};return dataService.getLimitedList=function(array){var limitedList=[];return angular.forEach(array,function(current,idx){idx<array.length-1&&limitedList.push(current.trim())}),limitedList},dataService.getListLastOne=function(array){return array.length>0?array[array.length-1].trim():""},dataService.getDisplayList=function(array){if(!array||0===array.length)return"";var displayList="";return angular.forEach(array,function(item){""!==displayList&&item&&(displayList+=", "),displayList+=item}),displayList},dataService.fillModelFromModal=function(item){return{name:item.title||item.originalTitle,summary:item.summary,duration:item.duration,year:item.releaseDate,cover:item.coverHref,actorsList:item.actors?dataService.getLimitedList(item.actors):[],actor:item.actors?dataService.getListLastOne(item.actors):void 0,producersList:item.producers?dataService.getLimitedList(item.producers):[],producer:item.producers?dataService.getListLastOne(item.producers):void 0,creatorsList:item.scenarists?dataService.getLimitedList(item.scenarists):[],creator:item.scenarists?dataService.getListLastOne(item.scenarists):void 0,seen:"SEEN",bought:!0}},dataService.fillLightTvSHowModel=function(tvShow){var model=fillBaseTvShowModel(tvShow);return model.producers=dataService.getDisplayList(tvShow.producers),model.actors=dataService.getDisplayList(tvShow.actors),model},dataService.fillCreateTvShowModel=function(tvShow){var model=fillBaseTvShowModel(tvShow);return model.producersList=dataService.getLimitedList(tvShow.producers),model.producer=dataService.getListLastOne(tvShow.producers),model.creatorsList=dataService.getLimitedList(tvShow.creators),model.creator=dataService.getListLastOne(tvShow.creators),model.actorsList=dataService.getLimitedList(tvShow.actors),model.actor=dataService.getListLastOne(tvShow.actors),model},dataService.fillViewTvShowModel=function(tvShow){var model=fillBaseTvShowModel(tvShow);return model.producers=dataService.getDisplayList(tvShow.producers),model.creators=dataService.getDisplayList(tvShow.creators),model.actors=dataService.getDisplayList(tvShow.actors),model.price=tvShow.price?model.price.toFixed(2):null,model},dataService.createTvShowFromModel=function(model){function fillTabs(modelTab,modelField){var tab=[];return angular.forEach(modelTab,function(current){tab.push(current)}),modelField&&tab.push(modelField),tab}return new TvShows({tvShowName:model.name,season:model.season,episodes:model.episodes,partial:model.partial,lastSeen:model.lastSeen,seen:model.seen,bought:model.bought,price:model.price,producers:fillTabs(model.producersList,model.producer),creators:fillTabs(model.creatorsList,model.creator),actors:fillTabs(model.actorsList,model.actor),cover:model.cover,channel:model.channel,duration:model.duration,year:model.year,tvShowRate:model.tvShowRate,summary:model.summary})},dataService}]),angular.module("tv-shows").factory("TvShowsExposed",["$resource",function($resource){var exposedApi={};return exposedApi.getLatest={method:"GET",isArray:!1,params:{apiAction:"latest"}},exposedApi.getCollectionNames={method:"GET",isArray:!0,params:{apiAction:"names"}},exposedApi.getCollections={method:"GET",isArray:!0,params:{apiAction:"collections"}},$resource("/api/tvshows/:apiAction",{},exposedApi)}]),angular.module("tv-shows").factory("TvShows",["$resource",function($resource){return $resource("tv-shows/:tvShowId",{tvShowId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);